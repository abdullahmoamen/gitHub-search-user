{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abdullah\\\\Desktop\\\\GitHub-search-app\\\\starter-project-react-github-search-users-master\\\\src\\\\context\\\\context.js\";\nimport React, { useState, useEffect, createContext } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [gitHubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); //request loading\n\n  const [requests, setRequests] = useState(0);\n  const [loadings, setLoading] = useState(false); //! ERRORS\n\n  const [error, setError] = useState({\n    show: false,\n    msg: ''\n  }); //TODO serach GithubUser\n\n  const searchGithubUser = async(user); // check rate\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, 'Sorry, You have exceedded your hourly rate limit !!');\n      }\n    }).catch(err => {});\n  };\n\n  function toggleError(show = false, msg = '') {\n    setError({\n      show,\n      msg\n    });\n  }\n\n  ;\n  useEffect(checkRequests, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      gitHubUser,\n      repos,\n      followers,\n      requests,\n      error\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["C:/Users/Abdullah/Desktop/GitHub-search-app/starter-project-react-github-search-users-master/src/context/context.js"],"names":["React","useState","useEffect","createContext","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","GithubProvider","children","gitHubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","loadings","setLoading","error","setError","show","msg","searchGithubUser","async","user","checkRequests","then","data","rate","remaining","toggleError","catch","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAAyD,OAAzD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAEN,aAAa,EAAlC;;AAEA,MAAMO,cAAc,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAChC,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BZ,QAAQ,CAACG,QAAD,CAAzC;AACA,QAAM,CAACU,KAAD,EAAOC,QAAP,IAAiBd,QAAQ,CAACI,SAAD,CAA/B;AACA,QAAM,CAACW,SAAD,EAAWC,YAAX,IAAyBhB,QAAQ,CAACK,aAAD,CAAvC,CAHgC,CAKhC;;AACA,QAAM,CAACY,QAAD,EAAUC,WAAV,IAAuBlB,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACmB,QAAD,EAAUC,UAAV,IAAsBpB,QAAQ,CAAC,KAAD,CAApC,CAPgC,CAQhC;;AACA,QAAM,CAACqB,KAAD,EAAOC,QAAP,IAAiBtB,QAAQ,CAAC;AAACuB,IAAAA,IAAI,EAAC,KAAN;AAAYC,IAAAA,GAAG,EAAC;AAAhB,GAAD,CAA/B,CATgC,CAUhC;;AACA,QAAMC,gBAAgB,GAAEC,KAAK,CAACC,IAAD,CAA7B,CAXgC,CAYhC;;AACA,QAAMC,aAAa,GAAC,MAAI;AACpBtB,IAAAA,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAAL,CACCsB,IADD,CACM,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAU;AACZ,UAAI;AAACC,QAAAA,IAAI,EAAC;AAACC,UAAAA;AAAD;AAAN,UAAoBF,IAAxB;AACAZ,MAAAA,WAAW,CAACc,SAAD,CAAX;;AACA,UAAGA,SAAS,KAAK,CAAjB,EAAmB;AACfC,QAAAA,WAAW,CAAC,IAAD,EAAM,qDAAN,CAAX;AACH;AACJ,KAPD,EAOGC,KAPH,CAOSC,GAAG,IAAE,CAEb,CATD;AAUH,GAXD;;AAaA,WAASF,WAAT,CAAqBV,IAAI,GAAG,KAA5B,EAAkCC,GAAG,GAAE,EAAvC,EAA0C;AACtCF,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAD,CAAR;AACH;;AAAA;AAEDvB,EAAAA,SAAS,CAAC2B,aAAD,EAAe,EAAf,CAAT;AACA,sBACA,oBAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AAACjB,MAAAA,UAAD;AAAYE,MAAAA,KAAZ;AAAkBE,MAAAA,SAAlB;AAA4BE,MAAAA,QAA5B;AAAqCI,MAAAA;AAArC,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKX,QAFL,CADA;AAMH,CArCD;;AAuCA,SAAQD,cAAR,EAAuBD,aAAvB","sourcesContent":["import React, { useState, useEffect, createContext} from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext =createContext();\n\nconst GithubProvider =({children})=>{\n    const [gitHubUser,setGithubUser]=useState(mockUser);\n    const [repos,setRepos]=useState(mockRepos);\n    const [followers,setFollowers]=useState(mockFollowers);\n\n    //request loading\n    const [requests,setRequests]=useState(0);\n    const [loadings,setLoading]=useState(false);\n    //! ERRORS\n    const [error,setError]=useState({show:false,msg:''})\n    //TODO serach GithubUser\n    const searchGithubUser =async(user)\n    // check rate\n    const checkRequests=()=>{\n        axios(`${rootUrl}/rate_limit`)\n        .then(({data})=>{\n            let {rate:{remaining},}=data;\n            setRequests(remaining);\n            if(remaining === 0){\n                toggleError(true,'Sorry, You have exceedded your hourly rate limit !!')\n            }\n        }).catch(err=>{\n            \n        })\n    }\n\n    function toggleError(show = false,msg= ''){\n        setError({show,msg})\n    };\n\n    useEffect(checkRequests,[])\n    return(\n    <GithubContext.Provider \n    value={{gitHubUser,repos,followers,requests,error}}>\n        {children}\n    </GithubContext.Provider>\n    )\n}\n\nexport {GithubProvider,GithubContext}"]},"metadata":{},"sourceType":"module"}